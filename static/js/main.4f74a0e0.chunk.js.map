{"version":3,"sources":["helper.js","App.js","serviceWorker.js","index.js"],"names":["rawProblemStr","startBoard","chunk","split","Cell","props","num","onClick","selected","coSelected","displayNum","id","className","Board","React","useState","board","setBoard","coord","setCoord","selectedNum","setSelectedNum","startKey","key","setKey","onDown","event","console","log","useEffect","window","addEventListener","removeEventListener","useKey","keyPressed","setKeyPressed","test","newBoard","handleOnClick","rowIdx","colIdx","row","col","map","cellNum","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6NAE2BA,ECKrBC,GDLqBD,ECIzB,oFDHOE,gBAAMF,EAAcG,MAAM,IAAK,ICQlCC,EAAO,SAACC,GAAW,IAAD,EAC+BA,EAA7CC,WADc,MACR,IADQ,EACHC,EAAkCF,EAAlCE,QAASC,EAAyBH,EAAzBG,SAAUC,EAAeJ,EAAfI,WAChCC,EAAqB,MAARJ,EAAc,GAAKA,EAChCK,EAAKH,EAAW,WAAaC,EAAa,cAAgB,GAChE,OACE,yBAAKG,UAAU,OAAOL,QAASA,EAASI,GAAIA,GAC1C,qCAAOD,MA8Bb,SAASG,IAAS,IAAD,EACWC,IAAMC,SAASd,GAD1B,mBACRe,EADQ,KACDC,EADC,OAEWH,IAAMC,SAAS,IAF1B,mBAERG,EAFQ,KAEDC,EAFC,OAGuBL,IAAMC,WAH7B,mBAGRK,EAHQ,KAGKC,EAHL,OAnBjB,SAAgBC,GAAW,IAAD,EACFR,IAAMC,SAASO,GADb,mBACjBC,EADiB,KACZC,EADY,KAGlBC,EAAS,SAACC,GACdC,QAAQC,IAAI,SAAUF,EAAMH,KAC5BC,EAAOE,EAAMH,MAWf,OARAT,IAAMe,WAAU,WAGd,OAFAC,OAAOC,iBAAiB,UAAWN,GAE5B,WACLK,OAAOE,oBAAoB,UAAWP,MAEvC,CAACF,IAEG,CAACA,EAAKC,GAOuBS,GAJrB,mBAIRC,EAJQ,KAIIC,EAJJ,KAMf,GAAI,QAAQC,KAAKF,GAAa,CAC5B,IAAMG,EAAQ,YAAOrB,GACrBqB,EAASnB,EAAM,IAAIA,EAAM,IAAMgB,EAC/Bb,EAAea,GACfC,IACAlB,EAASoB,GAGX,IAAMC,EAAgB,SAACC,EAAQC,GAAT,OAAoB,WAAM,kBAE3BtB,EAF2B,GAEvCuB,EAFuC,KAElCC,EAFkC,KAG9CrB,EAAeL,EAAMuB,GAAQC,IAE3BrB,EADEoB,IAAWE,GAAOD,IAAWE,EACtB,GAEA,CAACH,EAAQC,MAItB,OACE,yBAAK5B,UAAU,SACZI,EAAM2B,KAAI,SAACF,EAAKF,GAAN,OACT,yBAAK3B,UAAU,MAAMW,IAAG,cAASgB,IAC9BE,EAAIE,KAAI,SAACC,EAASJ,GACjB,IAAMhC,EAAW+B,IAAWrB,EAAM,IAAMsB,IAAWtB,EAAM,GACnDT,EAA6B,MAAhBW,GAAuBA,IAAgBwB,EAC1D,OACE,kBAAC,EAAD,CACEpC,SAAUA,EACVC,WAAYA,EACZc,IAAG,eAAUgB,EAAV,YAAoBC,GACvBlC,IAAKsC,EACLrC,QAAS+B,EAAcC,EAAQC,aAkBhCK,MARf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAACC,EAAD,QCtFciC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.4f74a0e0.chunk.js","sourcesContent":["import { chunk } from \"lodash\";\n\nexport function strToBoard(rawProblemStr) {\n  return chunk(rawProblemStr.split(''), 9)\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { strToBoard } from './helper'\nimport './App.css'\n\nconst rawProblemStr =\n  '004300209005009001070060043006002087190007400050083000600000105003508690042910300'\nconst startBoard = strToBoard(rawProblemStr)\n\n// const board = (new Array(9).fill(0)).map(() => new Array(9).fill(0))\n\nconst Cell = (props) => {\n  const { num = '0', onClick, selected, coSelected } = props\n  const displayNum = num === '0' ? '' : num\n  const id = selected ? 'selected' : coSelected ? 'co-selected' : ''\n  return (\n    <div className=\"cell\" onClick={onClick} id={id}>\n      <p>{`${displayNum}`}</p>\n    </div>\n  )\n}\nCell.propTypes = {\n  num: PropTypes.string,\n  onClick: PropTypes.func,\n  selected: PropTypes.bool,\n  coSelected: PropTypes.bool,\n}\n\nfunction useKey(startKey) {\n  const [key, setKey] = React.useState(startKey)\n  // Event handlers\n  const onDown = (event) => {\n    console.log('onDown', event.key)\n    setKey(event.key)\n    // if (match(event)) setPressed(false)\n  }\n  React.useEffect(() => {\n    window.addEventListener('keydown', onDown)\n\n    return () => {\n      window.removeEventListener('keydown', onDown)\n    }\n  }, [key])\n\n  return [key, setKey]\n}\n\nfunction Board() {\n  const [board, setBoard] = React.useState(startBoard)\n  const [coord, setCoord] = React.useState([])\n  const [selectedNum, setSelectedNum] = React.useState()\n  const [keyPressed, setKeyPressed] = useKey()\n\n  if (/[0-9]/.test(keyPressed)) {\n    const newBoard = [...board]\n    newBoard[coord[0]][coord[1]] = keyPressed\n    setSelectedNum(keyPressed)\n    setKeyPressed()\n    setBoard(newBoard)\n  }\n\n  const handleOnClick = (rowIdx, colIdx) => () => {\n    // if click on the selected cell\n    const [row, col] = coord\n    setSelectedNum(board[rowIdx][colIdx])\n    if (rowIdx === row && colIdx === col) {\n      setCoord([])\n    } else {\n      setCoord([rowIdx, colIdx])\n    }\n  }\n\n  return (\n    <div className=\"board\">\n      {board.map((row, rowIdx) => (\n        <div className=\"row\" key={`row-${rowIdx}`}>\n          {row.map((cellNum, colIdx) => {\n            const selected = rowIdx === coord[0] && colIdx === coord[1]\n            const coSelected = selectedNum !== '0' && selectedNum === cellNum\n            return (\n              <Cell\n                selected={selected}\n                coSelected={coSelected}\n                key={`cell-${rowIdx}-${colIdx}`}\n                num={cellNum}\n                onClick={handleOnClick(rowIdx, colIdx)}\n              />\n            )\n          })}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Board />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}